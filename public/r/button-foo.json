{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "button-foo",
  "type": "registry:ui",
  "title": "ButtonFoo",
  "description": "A simple knob component that displays a button with \"Hello World\" text",
  "files": [
    {
      "path": "registry/new-york/components/button-foo/index.ts",
      "content": "/**\n * A simple knob component that displays a button with \"Hello World\" text\n * @category buttons\n * @author John Doe <john.doe@example.com>\n */\n\nexport interface ButtonFooProps {\n  /**\n   * The label to display on the button\n   * @default \"Hello World\"\n   */\n  label?: string;\n}\n\n// @ajs-description A simple knob component that displays a button with \"Hello World\" text.\n// @ajs-category buttons\nexport { default as ButtonFoo } from './ButtonFoo.vue';\nexport { default as ButtonFooBar } from './ButtonFooBar.vue';\nexport { default as ButtonFooNoSetup } from './ButtonFooNoSetup.vue';\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/components/button-foo/ButtonFoo.vue",
      "content": "<script setup lang=\"ts\">\n/**\n * @author John Doe <john.doe@example.com>\n */\nimport { ref, inject, provide } from 'vue';\nimport type { Ref } from 'vue';\nimport { Button } from '@/components/ui/button';\n\nexport type ExportedType = { foo: string };\nexport interface ExportedInterface {\n  bar: number;\n}\n\n// Clés pour provide/inject\nconst symKey = Symbol('symKey');\nconst objKey = { key: 'objKey' };\nconst computedKey = { toString: () => 'computedKey' };\nconst spreadObj = { a: 1, b: 2 };\n\n// Provide avec clé symbole\nprovide(symKey, 'valSym');\n// Provide avec clé objet\nprovide(objKey, 123);\n// Provide avec clé computed\nprovide(computedKey, true);\n// Provide avec spread\nprovide('spread', { ...spreadObj });\n\n// Inject avec clé symbole\nconst injectedSym = inject(symKey, 'defaultSym');\n// Inject avec spread\nconst injectedSpread = inject('spread', { ...spreadObj });\n/**\n * A simple knob component that displays a button with \"Hello World\" text\n * @author John Doe <john.doe@example.com>\n */\n// @ajs-author John Doe <john.doe@example.com>\n\n/**\n * Possible return types for myFunc.\n */\ntype FuncReturn = 'foo' | 'bar' | 'baz';\n\n/**\n * An example interface with a sample property\n */\ninterface MyInterface {\n  /**\n   * A sample string property\n   */\n  sampleProp: string;\n  /**\n   * Another sample number property\n   */\n  sampleNumber: number;\n  foo(): void;\n}\n\nconst exposed = ref('');\nconst other: Ref<string> = ref('other exposed');\nconst myFunc = (): FuncReturn => {\n  console.log('This is my function');\n  return 'foo';\n};\n\n/**\n * Définit les slots disponibles pour ce composant.\n */\n\nconst slots = defineSlots({\n  /**\n   * Slot principal par défaut\n   */\n  default: (props: { label: string }) => {},\n  // Slot pour l'icône à gauche\n  icon: () => {},\n});\n\n/**\n * Injects a value with key 'someKey'.\n */\nconst injected = inject('someKey', 'defaultValue');\n\n/**\n * Provides a value with key 'someOtherKey'.\n */\nprovide('someOtherKey', 'providedValue');\n\nconst props = withDefaults(\n  defineProps<{\n    // @ajs-prop An optional string property named foo.\n    // An optional string property named foo\n    foo?: string;\n    // @ajs-prop A required number property named bar.\n    /**\n     * A required number property named bar\n     */\n    bar: number;\n  }>(),\n  {\n    bar: 42,\n  }\n);\n\nconst emit = defineEmits<{\n  /**\n   * Emitted when the button is clicked\n   */\n  (e: 'click'): void;\n}>();\n\ndefineExpose({\n  /**\n   * An exposed string property\n   */\n  exposed,\n  /**\n   * Another exposed string property\n   */\n  other,\n  /**\n   * An exposed function that logs a message and returns 'foo'\n   */\n  myFunc,\n});\n</script>\n\n<template>\n  <Button class=\"btn-main\" :class=\"['dynamic-class', { 'btn-secondary': true }]\">\n    <!-- Text of the button -->\n    <slot>Hello World</slot>\n    <!-- Icon slot for the button -->\n    <slot name=\"icon\" />\n    <!-- Right icon slot for the button -->\n    <slot name=\"icon-right\" />\n    <slot :name=\"'named-dynamic'\">Named dynamic slot</slot>\n    <slot name=\"static-named\">Static named slot</slot>\n    <MyChild :foo=\"foo\">\n      <template #header>Header slot</template>\n      <template v-slot:footer>Footer slot</template>\n      <template #dynamicSlot>Dynamic slot</template>\n    </MyChild>\n    <OtherChild bar=\"42\"> </OtherChild>\n  </Button>\n</template>\n\n<style scoped>\n.btn-main {\n  color: red;\n}\n\n.btn-secondary {\n  color: blue;\n}\n\n.dynamic-class {\n  font-weight: bold;\n}\n\n/* Couleur principale du bouton */\n:root {\n  --btn-main-color: #ff0000;\n  /* Rayon de bordure du bouton */\n  --btn-radius: 4px;\n  /* Padding horizontal du bouton */\n  --btn-padding-x: 1.5em;\n}\n</style>\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/components/button-foo/ButtonFooBar.vue",
      "content": "<script setup lang=\"ts\">\nimport { Button } from '@/components/ui/button';\n\nconst props = withDefaults(\n  defineProps<{\n    // @ajs-prop An optional string property named foo.\n    foo?: string;\n    // @ajs-prop A required number property named ack.\n    ack: number;\n  }>(),\n  {\n    ack: 1242,\n  }\n);\n</script>\n\n<template>\n  <Button>Hello World</Button>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/components/button-foo/ButtonFooNoSetup.vue",
      "content": "<script lang=\"ts\">\n/**\n * A simple knob component that displays a button with \"Hello World\" text\n * @author John Doe <john.doe@example.com>\n */\nimport { ref, inject, provide } from 'vue';\nimport { Button } from '@/components/ui/button';\n\n// Types d'export\n/**\n * Possible return types for myFunc.\n */\nexport type ExportedType = { foo: string };\n/**\n * An example interface with a sample property\n */\nexport interface ExportedInterface {\n  /**\n   * A sample string property\n   */\n  bar: number;\n}\n\n// Clés pour provide/inject\nconst symKey = Symbol('symKey');\nconst objKey = { key: 'objKey' };\nconst computedKey = { toString: () => 'computedKey' };\nconst spreadObj = { a: 1, b: 2 };\n\nconst exposed = ref('');\nconst other = ref('other exposed');\n\nexport default {\n  name: 'ButtonFooNoSetup',\n  /**\n   * Définit les props du composant.\n   */\n  props: {\n    /**\n     * An optional string property named foo\n     */\n    foo: {\n      type: String,\n      required: false,\n    },\n    /**\n     * A required number property named bar\n     */\n    bar: {\n      type: Number,\n      required: true,\n      default: 42,\n    },\n  },\n  /**\n   * Définit les événements émis par le composant.\n   */\n  emits: [\n    /**\n     * Emitted when the button is clicked\n     */\n    'click',\n  ],\n  /**\n   * Méthodes du composant.\n   */\n  methods: {\n    /**\n     * An exposed function that logs a message and returns 'foo'\n     */\n    myFunc() {\n      console.log('This is my function');\n      return 'foo';\n    },\n    emitClick() {\n      this.$emit('click');\n    },\n  },\n  /**\n   * Propriétés calculées exposées.\n   */\n  computed: {\n    // ...autres computed...\n    foo() {\n      return this.$props.foo;\n    },\n  },\n  inject: {\n    // Injects a value with key 'someKey'.\n    injected: 'someKey',\n    // Inject avec clé symbole\n    injectedSym: symKey,\n    // Inject avec spread\n    injectedSpread: 'spread',\n  },\n  /**\n   * Fournit des valeurs via l'option provide de l'API Options.\n   */\n  /**\n   * Fournit des valeurs via l'option provide de l'API Options.\n   *\n   * - someOtherKey : Provides a value with key 'someOtherKey'.\n   * - symKey : Provide avec clé symbole\n   * - computedKey : Provide avec clé computed\n   * - spread : Provide avec spread\n   */\n  /**\n   * Fournit des valeurs via l'option provide de l'API Options.\n   *\n   * - someOtherKey : Provides a value with key 'someOtherKey'.\n   * - symKey : Provide avec clé symbole\n   * - computedKey : Provide avec clé computed\n   * - spread : Provide avec spread\n   */\n  provide() {\n    return {\n      // Provides a value with key 'someOtherKey'.\n      someOtherKey: 'providedValue',\n      // Provide avec clé symbole\n      symKey: 'valSym',\n      // Provide avec clé computed\n      computedKey: true,\n      // Provide avec spread\n      spread: { ...spreadObj },\n    };\n  },\n  /**\n   * Expose properties and methods like defineExpose in <script setup>\n   */\n  expose: [\n    /**\n     * An exposed string property\n     */\n    'exposed',\n    /**\n     * Another exposed string property\n     */\n    'other',\n    /**\n     * An exposed function that logs a message and returns 'foo'\n     */\n    'myFunc',\n  ],\n};\n</script>\n\n<template>\n  <Button class=\"btn-main\" :class=\"['dynamic-class', { 'btn-secondary': true }]\">\n    <!-- Text of the button -->\n    <slot :foo=\"this.foo ?? ''\">Hello World</slot>\n    <!-- Icon slot for the button -->\n    <slot name=\"icon\" />\n    <!-- Right icon slot for the button -->\n    <slot name=\"icon-right\" />\n    <slot :name=\"'named-dynamic'\">Named dynamic slot</slot>\n    <slot name=\"static-named\">Static named slot</slot>\n    <MyChild :foo=\"this.foo ?? ''\">\n      <template #header>Header slot</template>\n      <template v-slot:footer>Footer slot</template>\n      <template #dynamicSlot>Dynamic slot</template>\n    </MyChild>\n    <OtherChild bar=\"42\"> </OtherChild>\n  </Button>\n</template>\n\n<style scoped>\n.btn-main {\n  color: red;\n}\n.btn-secondary {\n  color: blue;\n}\n.dynamic-class {\n  font-weight: bold;\n}\n\n/* Couleur principale du bouton */\n:root {\n  --btn-main-color: #ff0000;\n  /* Rayon de bordure du bouton */\n  --btn-radius: 4px;\n  /* Padding horizontal du bouton */\n  --btn-padding-x: 1.5em;\n}\n</style>\n",
      "type": "registry:ui"
    }
  ]
}