{
  "path": "registry/new-york/components/input/SimpleInput.vue",
  "description": "Un champ de saisie simple avec label et placeholder",
  "author": "Jane Doe <jane.doe@example.com>",
  "childComponents": [],
  "props": [
    {
      "name": "label",
      "type": "String",
      "default": "",
      "description": "Le label affiché au-dessus du champ"
    },
    {
      "name": "placeholder",
      "type": "String",
      "default": "",
      "description": "Le placeholder du champ"
    },
    {
      "name": "modelValue",
      "type": "String",
      "default": "",
      "description": "Valeur du champ"
    }
  ],
  "slots": [],
  "emits": [
    {
      "name": "update:modelValue",
      "description": "Valeur du champ"
    }
  ],
  "exposes": [],
  "injects": [
    {
      "key": "injected",
      "default": "'someKey'",
      "type": "string",
      "description": "Injects a value with key 'someKey'."
    },
    {
      "key": "injectedSym",
      "default": "symKey",
      "type": "any",
      "description": "Inject avec clé symbole"
    },
    {
      "key": "injectedSpread",
      "default": "'spread'",
      "type": "string",
      "description": "Inject avec spread"
    }
  ],
  "provides": [
    {
      "key": "someOtherKey",
      "value": "'providedValue'",
      "type": "string",
      "description": "Provides a value with key 'someOtherKey'."
    },
    {
      "key": "symKey",
      "value": "'valSym'",
      "type": "string",
      "description": "Provide avec clé symbole"
    },
    {
      "key": "computedKey",
      "value": "true",
      "type": "boolean",
      "description": "Provide avec clé computed"
    }
  ],
  "types": [],
  "cssVars": [],
  "source": {
    "html": "<script lang=\"ts\">\n/**\n * Un champ de saisie simple avec label et placeholder\n * @author Jane Doe <jane.doe@example.com>\n */\n\nconst symKey = Symbol('symKey');\n\nexport default {\n  name: 'SimpleInput',\n  /**\n   * Propriétés du composant\n   */\n  props: {\n    /**\n     * Le label affiché au-dessus du champ\n     */\n    label: {\n      type: String,\n      required: false,\n      default: '',\n    },\n    /**\n     * Le placeholder du champ\n     */\n    placeholder: {\n      type: String,\n      required: false,\n      default: '',\n    },\n    /**\n     * Valeur du champ\n     */\n    modelValue: {\n      type: String,\n      required: false,\n      default: '',\n    },\n  },\n  emits: [\n    /**\n     * Émis à chaque modification de la valeur\n     */\n    'update:modelValue',\n  ],\n  inject: {\n    // Injects a value with key 'someKey'.\n    injected: 'someKey',\n    // Inject avec clé symbole\n    injectedSym: symKey,\n    // Inject avec spread\n    injectedSpread: 'spread',\n  },\n  provide() {\n    return {\n      // Provides a value with key 'someOtherKey'.\n      someOtherKey: 'providedValue',\n      // Provide avec clé symbole\n      symKey: 'valSym',\n      // Provide avec clé computed\n      computedKey: true,\n    };\n  },\n  methods: {\n    onInput(event: Event) {\n      this.$emit('update:modelValue', (event.target as HTMLInputElement).value);\n    },\n    /**\n     * Expose properties and methods like defineExpose in <script setup>\n     */\n    expose: [\n      /**\n       * An exposed string property\n       */\n      'exposed',\n      /**\n       * Another exposed string property\n       */\n      'other',\n      /**\n       * An exposed function that logs a message and returns 'foo'\n       */\n      'myFunc',\n    ],\n  },\n};\n</script>\n\n<template>\n  <label v-if=\"label\">{{ label }}</label>\n  <input :placeholder=\"placeholder\" :value=\"modelValue\" @input=\"onInput\" type=\"text\" />\n</template>\n\n<style scoped>\ninput {\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  padding: 0.5em 1em;\n  font-size: 1em;\n}\nlabel {\n  display: block;\n  margin-bottom: 0.25em;\n  font-weight: bold;\n}\n</style>\n",
    "pug": "<script lang=\"ts\">\n/**\n * Un champ de saisie simple avec label et placeholder\n * @author Jane Doe <jane.doe@example.com>\n */\n\nconst symKey = Symbol('symKey');\n\nexport default {\n  name: 'SimpleInput',\n  /**\n   * Propriétés du composant\n   */\n  props: {\n    /**\n     * Le label affiché au-dessus du champ\n     */\n    label: {\n      type: String,\n      required: false,\n      default: '',\n    },\n    /**\n     * Le placeholder du champ\n     */\n    placeholder: {\n      type: String,\n      required: false,\n      default: '',\n    },\n    /**\n     * Valeur du champ\n     */\n    modelValue: {\n      type: String,\n      required: false,\n      default: '',\n    },\n  },\n  emits: [\n    /**\n     * Émis à chaque modification de la valeur\n     */\n    'update:modelValue',\n  ],\n  inject: {\n    // Injects a value with key 'someKey'.\n    injected: 'someKey',\n    // Inject avec clé symbole\n    injectedSym: symKey,\n    // Inject avec spread\n    injectedSpread: 'spread',\n  },\n  provide() {\n    return {\n      // Provides a value with key 'someOtherKey'.\n      someOtherKey: 'providedValue',\n      // Provide avec clé symbole\n      symKey: 'valSym',\n      // Provide avec clé computed\n      computedKey: true,\n    };\n  },\n  methods: {\n    onInput(event: Event) {\n      this.$emit('update:modelValue', (event.target as HTMLInputElement).value);\n    },\n    /**\n     * Expose properties and methods like defineExpose in <script setup>\n     */\n    expose: [\n      /**\n       * An exposed string property\n       */\n      'exposed',\n      /**\n       * Another exposed string property\n       */\n      'other',\n      /**\n       * An exposed function that logs a message and returns 'foo'\n       */\n      'myFunc',\n    ],\n  },\n};\n</script>\n\n<template lang=\"pug\">\nlabel(v-if=\"label\")\n  | {{ label }}\ninput(:placeholder=\"placeholder\" :value=\"modelValue\" @input=\"onInput\" type=\"text\")\n</template>\n\n<style scoped>\ninput {\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  padding: 0.5em 1em;\n  font-size: 1em;\n}\nlabel {\n  display: block;\n  margin-bottom: 0.25em;\n  font-weight: bold;\n}\n</style>\n"
  }
}