{
  "name": "input",
  "title": "Input",
  "path": "registry/new-york/components/input/index.ts",
  "description": "Index file for input components",
  "author": "John Smith <john.smith",
  "category": "",
  "source": "/**\n * Index file for input components\n * @author John Smith <john.smith@example.com>\n */\nexport { default as SimpleInput } from './SimpleInput.vue';\n",
  "items": [
    {
      "name": "index",
      "path": "registry/new-york/components/input/index.ts",
      "doc": {
        "description": "Index file for input components",
        "author": "John Smith <john.smith",
        "category": "",
        "types": [],
        "source": "/**\n * Index file for input components\n * @author John Smith <john.smith@example.com>\n */\nexport { default as SimpleInput } from './SimpleInput.vue';\n"
      }
    },
    {
      "name": "SimpleInput",
      "path": "registry/new-york/components/input/SimpleInput.vue",
      "doc": {
        "path": "registry/new-york/components/input/SimpleInput.vue",
        "description": "Un champ de saisie simple avec label et placeholder",
        "author": "Jane Doe <jane.doe@example.com>",
        "childComponents": [],
        "props": [
          {
            "name": "label",
            "type": "String",
            "default": "",
            "description": "Le label affiché au-dessus du champ"
          },
          {
            "name": "placeholder",
            "type": "String",
            "default": "",
            "description": "Le placeholder du champ"
          },
          {
            "name": "modelValue",
            "type": "String",
            "default": "",
            "description": "Valeur du champ"
          }
        ],
        "slots": [
          {
            "name": "prefix",
            "description": "",
            "params": "-"
          },
          {
            "name": "useful",
            "description": "",
            "params": "foo"
          },
          {
            "name": "default",
            "description": "",
            "params": "-"
          }
        ],
        "emits": [
          {
            "name": "update:modelValue",
            "description": "Valeur du champ"
          }
        ],
        "exposes": [
          {
            "name": "exposed",
            "description": "An exposed string property"
          },
          {
            "name": "other",
            "description": "Another exposed string property"
          },
          {
            "name": "myFunc",
            "description": "An exposed function that logs a message and returns 'foo'"
          }
        ],
        "injects": [
          {
            "key": "injected",
            "default": "'someKey'",
            "type": "string",
            "description": "Injects a value with key 'someKey'."
          },
          {
            "key": "injectedSym",
            "default": "symKey",
            "type": "any",
            "description": "Inject avec clé symbole"
          },
          {
            "key": "injectedSpread",
            "default": "'spread'",
            "type": "string",
            "description": "Inject avec spread"
          }
        ],
        "provides": [
          {
            "key": "someOtherKey",
            "value": "'providedValue'",
            "type": "string",
            "description": "Provides a value with key 'someOtherKey'."
          },
          {
            "key": "symKey",
            "value": "'valSym'",
            "type": "string",
            "description": "Provide avec clé symbole"
          },
          {
            "key": "computedKey",
            "value": "true",
            "type": "boolean",
            "description": "Provide avec clé computed"
          }
        ],
        "types": [],
        "cssVars": [
          {
            "name": "--input-border-color",
            "value": "#ccc",
            "description": ""
          },
          {
            "name": "--input-border-radius",
            "value": "4px",
            "description": ""
          },
          {
            "name": "--input-padding",
            "value": "0.5em 1em",
            "description": ""
          },
          {
            "name": "--input-font-size",
            "value": "1em",
            "description": ""
          }
        ],
        "source": {
          "html": "<script lang=\"ts\">\n/**\n * Un champ de saisie simple avec label et placeholder\n * @author Jane Doe <jane.doe@example.com>\n */\n\nconst symKey = Symbol('symKey');\n\nexport default {\n  name: 'SimpleInput',\n  /**\n   * Propriétés du composant\n   */\n  props: {\n    /**\n     * Le label affiché au-dessus du champ\n     */\n    label: {\n      type: String,\n      required: false,\n      default: '',\n    },\n    /**\n     * Le placeholder du champ\n     */\n    placeholder: {\n      type: String,\n      required: false,\n      default: '',\n    },\n    /**\n     * Valeur du champ\n     */\n    modelValue: {\n      type: String,\n      required: false,\n      default: '',\n    },\n  },\n  emits: [\n    /**\n     * Émis à chaque modification de la valeur\n     */\n    'update:modelValue',\n  ],\n  inject: {\n    // Injects a value with key 'someKey'.\n    injected: 'someKey',\n    // Inject avec clé symbole\n    injectedSym: symKey,\n    // Inject avec spread\n    injectedSpread: 'spread',\n  },\n  provide() {\n    return {\n      // Provides a value with key 'someOtherKey'.\n      someOtherKey: 'providedValue',\n      // Provide avec clé symbole\n      symKey: 'valSym',\n      // Provide avec clé computed\n      computedKey: true,\n    };\n  },\n  methods: {\n    onInput(event: Event) {\n      this.$emit('update:modelValue', (event.target as HTMLInputElement).value);\n    },\n  },\n  /**\n   * Expose properties and methods like defineExpose in <script setup>\n   */\n  expose: [\n    /**\n     * An exposed string property\n     */\n    'exposed',\n    /**\n     * Another exposed string property\n     */\n    'other',\n    /**\n     * An exposed function that logs a message and returns 'foo'\n     */\n    'myFunc',\n  ],\n};\n</script>\n\n<template>\n  <label v-if=\"label\">{{ label }}</label>\n  <div>\n    <slot name=\"prefix\"></slot>\n    <slot name=\"useful\" :foo=\"bar\" />\n    <slot />\n  </div>\n  <input :placeholder=\"placeholder\" :value=\"modelValue\" @input=\"onInput\" type=\"text\" />\n</template>\n\n<style scoped>\n:root {\n  --input-border-color: #ccc;\n  --input-border-radius: 4px;\n  --input-padding: 0.5em 1em;\n  --input-font-size: 1em;\n}\n\ninput {\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  padding: 0.5em 1em;\n  font-size: 1em;\n}\nlabel {\n  display: block;\n  margin-bottom: 0.25em;\n  font-weight: bold;\n}\n</style>\n",
          "pug": "<script lang=\"ts\">\n/**\n * Un champ de saisie simple avec label et placeholder\n * @author Jane Doe <jane.doe@example.com>\n */\n\nconst symKey = Symbol('symKey');\n\nexport default {\n  name: 'SimpleInput',\n  /**\n   * Propriétés du composant\n   */\n  props: {\n    /**\n     * Le label affiché au-dessus du champ\n     */\n    label: {\n      type: String,\n      required: false,\n      default: '',\n    },\n    /**\n     * Le placeholder du champ\n     */\n    placeholder: {\n      type: String,\n      required: false,\n      default: '',\n    },\n    /**\n     * Valeur du champ\n     */\n    modelValue: {\n      type: String,\n      required: false,\n      default: '',\n    },\n  },\n  emits: [\n    /**\n     * Émis à chaque modification de la valeur\n     */\n    'update:modelValue',\n  ],\n  inject: {\n    // Injects a value with key 'someKey'.\n    injected: 'someKey',\n    // Inject avec clé symbole\n    injectedSym: symKey,\n    // Inject avec spread\n    injectedSpread: 'spread',\n  },\n  provide() {\n    return {\n      // Provides a value with key 'someOtherKey'.\n      someOtherKey: 'providedValue',\n      // Provide avec clé symbole\n      symKey: 'valSym',\n      // Provide avec clé computed\n      computedKey: true,\n    };\n  },\n  methods: {\n    onInput(event: Event) {\n      this.$emit('update:modelValue', (event.target as HTMLInputElement).value);\n    },\n  },\n  /**\n   * Expose properties and methods like defineExpose in <script setup>\n   */\n  expose: [\n    /**\n     * An exposed string property\n     */\n    'exposed',\n    /**\n     * Another exposed string property\n     */\n    'other',\n    /**\n     * An exposed function that logs a message and returns 'foo'\n     */\n    'myFunc',\n  ],\n};\n</script>\n\n<template lang=\"pug\">\nlabel(v-if=\"label\")\n  | {{ label }}\ndiv\n  slot(name=\"prefix\")\n  slot(name=\"useful\" :foo=\"bar\")\n  slot\ninput(:placeholder=\"placeholder\" :value=\"modelValue\" @input=\"onInput\" type=\"text\")\n</template>\n\n<style scoped>\n:root {\n  --input-border-color: #ccc;\n  --input-border-radius: 4px;\n  --input-padding: 0.5em 1em;\n  --input-font-size: 1em;\n}\n\ninput {\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  padding: 0.5em 1em;\n  font-size: 1em;\n}\nlabel {\n  display: block;\n  margin-bottom: 0.25em;\n  font-weight: bold;\n}\n</style>\n"
        }
      }
    }
  ]
}